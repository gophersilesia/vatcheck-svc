Go workshop: Build a microservice from scratch
Gophers Katowice, November 19, 2016

Jonathan Gautheron & Karol Górecki

* About us

Past and current works:

- [[https://www.exago.io][exago]] — Code quality as a service.
- [[https://github.com/karolgorecki/goprove][goprove]] — Inspect your project for the best practices listed in the Go Checklist.
- [[https://github.com/jgautheron/goconst][goconst]], [[https://github.com/jgautheron/usedexports][usedexports]], [[https://github.com/jgautheron/gogetimports][gogetimports]] — Code quality tools.
- Microservices

.image http://golang.org/doc/gopher/gopherbw.png 200 _

* Best Practices in Go

1. *Executable*commands*must*always*use* `package`main`
Which is why `cmd` uses the `package`main`, the communication channel with the API being command line.

2. *Name* `server` *the*HTTP*server*
Keep the HTTP stuff isolated in this package, detached from the API.
It's HTTP now, might be another transport tomorrow.

3. *Natural*language*for*documentation*
Forget about the good old @tag.

4. *Keep*it*simple*
Stay away from frameworks as much as possible, until it makes sense.
Learn properly the standard library.

* Microservice Best Practices

1. *Single*Business*Capability*
Keep it focused.

2. *Bounded-context*
Avoid liabilities and moving stones.

3. *Distribution*
Scale from 1 to infinity effortlessly.

4. *Resilience*
Make it damn hard to kill. Think cockroach.

5. *Polyglot*
Use the best tool for the job.

.image https://pbs.twimg.com/profile_images/592837647577587714/eNMItpUG.png _ 150

* For the sake of this exercise

We transgressed a few microservice principles for the sake of simplicity.

- Cache should be distributed
- Configuration should be distributed as well

.image distributed.png _ 150

* Chapters

1. Validation logic
2. Circuit breaker
3. Caching layer (+ config)
4. Tests + bench
5. HTTP server
6. `cmd` package

* A few extras

If we have time, we'll take a look at:

7. Makefile
8. Vendoring
9. Docker

* You will need

*Environment*

1. A working Go environment (preferably `1.7.3`)
2. A code editor properly configured to run automatically `goimports`

*Dependencies*

`go`get`github.com/Sirupsen/logrus`
`go`get`github.com/hotolab/envconfig`
`go`get`github.com/labstack/echo/...`
`go`get`github.com/mattes/vat`
`go`get`github.com/sony/gobreaker`
`go`get`github.com/urfave/cli`
`go`get`github.com/wunderlist/ttlcache`

* Time to code!

.image coders.png 500 _
